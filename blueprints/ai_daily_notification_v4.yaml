blueprint:
  name: AI Daily Notification v4
  source_url: https://raw.githubusercontent.com/marcnl/homeassistant/main/blueprints/ai_daily_notification_v4.yaml
  description: "# AI Daily Notification\n **Version:
    4.0**\n\n Conversation agent generates a notification based on the upcoming calendar items,
    location and weather.\n\n - Don't forget to check the *Conversation
    agent prompt* and the end and update it if needed.\n\n - Adjust the maximum tokens
    to return in the OpenAI integration if needed.\n\n - If you need to send notifications to
    multiple receivers, use notify.group.\n\n"
  author: molski
  domain: automation
  input:
    weekday:
      name: Day of the week to use the automation
      description: Day of the week to run the automation
      default:
      - mon
      - tue
      - wed
      - thu
      - fri
      - sat
      - sun
      selector:
        select:
          options:
          - label: Monday
            value: mon
          - label: Tuesday
            value: tue
          - label: Wednesday
            value: wed
          - label: Thursday
            value: thu
          - label: Friday
            value: fri
          - label: Saturday
            value: sat
          - label: Sunday
            value: sun
          custom_value: false
          multiple: true
    notify_time:
      name: Notification time
      description: Time the automation is triggered to send the notification.
      selector:
        time: {}
      default: 09:30:00
    calendar_entity:
      name: Calendar
      description: The calendar entity to use for finding upcoming calendar events.
      default: calendar.agenda_m365_calendar_marc
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - calendar
    calendar_duration:
      name: Calendar event duration
      description: How many hours ahead to look for upcoming calendar events.
      selector:
        duration: {}
      default:
        hours: 24
        minutes: 0
        seconds: 0
    weather_entity:
      name: Weather entity
      description: The weather entity to use for upcoming weather forecast.
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - weather
      default: weather.forecast_home
    zone_entity:
      name: Home zone entity
      description: The zone entity to use to determine approximate location for understanding typical weather.
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - zone
      default: zone.home
    notify_number:
      name: How many notify services do you want to use?
      description: Select the number
      default: one
      selector:
        select:
          options:
            - label: "1"
              value: one
            - label: "2"
              value: two
          multiple: false
          custom_value: false
          sort: false
    notify_service_1:
      name: First Notify service name
      description: The name of the first notify service where the notification should be sent.
      selector:
        text:
          multiple: false
          multiline: false
      default: notify.alert_echo_show_mancave
    notify_service_2:
      name: Second Notify service name
      description: The name of the second notify service where the notification should be sent.
      selector:
        text:
          multiple: false
          multiline: false
      default: notify.molski
    conversation_agent:
      name: Conversation agent
      description:
        "The conversation agent to use for generating the notification text.
        This should be an OpenAI conversation agent for this Blueprint to work."
      selector:
        conversation_agent: {}
      default: "OpenAI Conversation"
    prompt:
      name: Conversation agent prompt
      selector:
        text:
          multiline: true
          type: text
          multiple: false
      default:
        "Please generate text for a notification that will be sent to the users
        smartphone with helpful information.\n\nYou are a helpful personal agent that
        generates text for the user:\n- Your answers are helpful, friendly, warm,
        insightful.\n- Your answers are not technical, and do not include Home Assistant
        internal details such as entities in responses.\n- Your messages help the
        user prepare for their day, for example:\n  - The calendar belongs to one person,
        provide an overview, and make special remarks if some events match in time and
        the title or description makes a mention between calendars\n  - Making note
        of unusual weather for the location and time of year (but not mundane details
        like \"0% chance of precipitation\")\n  - How much time remaining until their
        first meeting\n  - Anything that may be special or unique, such as celebrating
        a birthday"
trigger:
  platform: time
  at: !input notify_time
action:
  - if:
      - condition: time
        weekday: !input weekday
    then:
      - variables:
          weather_entity: !input weather_entity
          calendar_entity: !input calendar_entity
          zone_entity: !input zone_entity
          weekday: !input weekday
          calendar_duration: !input calendar_duration
          prompt: !input prompt
      - alias: Fetch Calendar Agenda
        service: calendar.get_events
        data:
          duration: !input calendar_duration
        target:
          entity_id: !input calendar_entity
        response_variable: agenda_1
      - alias: Conversation Agent Notification Text
        service: conversation.process
        data:
          text: 
            "Time: {{ now() }}\n{%- if zone_entity is defined %}\nLatitude: {{ state_attr(zone_entity,
            'latitude') | round(1) }}\nLongitude: {{ state_attr(zone_entity, 'longitude')
            | round(1) }}\n{% endif %}\n\n
            {%- if weather_entity is defined %}
            {% for state in states.weather -%}
              {%- if loop.first %}The {% elif loop.last %} and the {% else %}, the {% endif -%}
              {{ state.name | lower }} is {{state.state_with_unit}}
            {%- endfor %} and the temperature is {{ state_attr(weather_entity, 'temperature') }}
            {%- endif %}
            \n\n\nCalendar \"{{ state_attr(calendar_entity, 'friendly_name') }}\"
            events for the next {{ calendar_duration.hours }} hours:\n{%- if agenda_1[calendar_entity].events
            %}\n  {%- for event in agenda_1[calendar_entity].events %}\n  - Summary: {{ event.summary }}\n
            \   Start-End: {% if event.start is defined %}{{ as_timestamp(event.start) |
            timestamp_custom(\"%c\") }} to {{ as_timestamp(event.end) | timestamp_custom(\"%c\")
            }}{% else %}All Day{% endif %}\n    {%- if event.description is defined %}\n
            \   Description: {{ event.description }}\n    {% endif -%}\n    {%- if event.location
            is defined %}\n      Location: {{ event.location }}\n    {% endif -%}\n  {%-
            endfor %}\n{%- else %}\n  - No upcoming events.\n{%- endif %}\n\n{{ prompt }}"
          agent_id: !input conversation_agent
        response_variable: agent
      - alias: Send notification to notify_service_1
        service: !input notify_service_1
        data:
          message: "{{ agent.response.speech.plain.speech }}"
      - if:
          - condition: template
            value_template: "{{ (notify_number != 'one')
              }}"
        then:
          - alias: Send notification to notify_service_2
            service: !input notify_service_2
            data:
              message: "{{ agent.response.speech.plain.speech }}"
